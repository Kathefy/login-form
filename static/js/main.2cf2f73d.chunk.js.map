{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FomikInput","react_default","a","createElement","className","formik_esm","initialValues","name","email","password","validate","values","errors","test","emailClass","nameClass","length","passwordClass","onSubmit","_ref","setSubmitting","error","Math","floor","random","setTimeout","alert","_ref2","touched","handleChange","handleBlur","handleSubmit","isSubmitting","type","onChange","onBlur","value","disabled","App","App_FomikInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2cf2f73d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport \"./App.css\";\n\nconst FomikInput = () => (\n  <div className=\"form\">\n    <Formik\n      initialValues={{\n        name: \"\",\n        email: \"\",\n        password: \"\"\n      }}\n      validate={values => {\n        let errors = {};\n        if (!values.email) {\n          errors.email = <span className=\"error\"> &bull; Required</span>;\n          errors.emailClass = \"errorInput\";\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = (\n            <span className=\"error\"> &bull; Invalid email address</span>\n          );\n          errors.emailClass = \"errorInput\";\n        }\n        if (!values.name) {\n          errors.name = <span className=\"error\"> &bull; Required</span>;\n          errors.nameClass = \"errorInput\";\n        }\n        if (!values.password) {\n          errors.password = <span className=\"error\"> &bull; Required</span>;\n          errors.passwordClass = \"errorInput\";\n        } else if (values.password.length < 8) {\n          errors.password = (\n            <span className=\"error\"> &bull; min 8 characters</span>\n          );\n          errors.passwordClass = \"errorInput\";\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting }) => {\n        let errors = [\n          \"No such file or directory\",\n          \"Sorry, this username is taken\",\n          \"The server is not reachable\",\n          \"Site doesn't exist\"\n        ];\n        let error = errors[Math.floor(Math.random() * errors.length)];\n        setTimeout(() => {\n          alert(error);\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <div className=\"loginForm\">\n            <div className=\"container\">\n              <input\n                className={\n                  \"inputText \" +\n                  (errors.name && touched.name && errors.nameClass)\n                }\n                type=\"text\"\n                name=\"name\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.name}\n              />\n              <span className=\"labelFloat\">\n                Full Name\n                {errors.name && touched.name && errors.name}\n              </span>\n            </div>\n            <div className=\"container\">\n              <input\n                className={\n                  \"inputText \" +\n                  (errors.email && touched.email && errors.emailClass)\n                }\n                type=\"email\"\n                name=\"email\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.email}\n              />\n              <span className=\"labelFloat\">\n                Email\n                {errors.email && touched.email && errors.email}\n              </span>\n            </div>\n            <div className=\"container\">\n              <input\n                className={\n                  \"inputText inputTextLast \" +\n                  (errors.password && touched.password && errors.passwordClass)\n                }\n                type=\"password\"\n                name=\"password\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.password}\n              />\n              <span className=\"labelFloat\">\n                Password\n                {errors.password && touched.password && errors.password}\n              </span>\n            </div>\n          </div>\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    </Formik>\n  </div>\n);\n\nclass App extends Component {\n  render() {\n    return <FomikInput />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}