{"version":3,"sources":["Helper.js","App.js","serviceWorker.js","index.js"],"names":["HandleSubmit","values","_ref","resetForm","errors","error","Math","floor","random","length","setTimeout","alert","InputLine","errorsName","touched","name","title","type","react_default","a","createElement","className","formik_esm","concat","FormikApp","withFormik","mapPropsToValues","email","password","validationSchema","Yup","shape","required","min","handleSubmit","_ref2","isSubmitting","App_InputLine","disabled","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAaeA,EAbM,SAACC,EAADC,GAA2B,IAAhBC,EAAgBD,EAAhBC,UAC1BC,EAAS,CACX,4BACA,gCACA,8BACA,sBAEEC,EAAQD,EAAOE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,SACrDC,WAAW,WACTC,MAAMN,GACNF,KACC,MCLCS,EAAY,SAAAV,GAAA,IAAGW,EAAHX,EAAGW,WAAYC,EAAfZ,EAAeY,QAASC,EAAxBb,EAAwBa,KAAMC,EAA9Bd,EAA8Bc,MAAOC,EAArCf,EAAqCe,KAArC,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACED,UAAS,YAAAE,OAAcV,GAAcC,EAAU,cAAgB,IAC/DG,KAAMA,EACNF,KAAMA,IAERG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACbL,EACAH,GAAcC,GAAWI,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASR,MAyD1CW,EApBGC,YAAW,CAC3BC,iBAD2B,WAEzB,MAAO,CACLX,KAAM,GACNY,MAAO,GACPC,SAAU,KAGdC,iBAAkBC,WAAaC,MAAM,CACnChB,KAAMe,WAAaE,SAAS,YAC5BL,MAAOG,WACJH,MAAM,yBACNK,SAAS,YACZJ,SAAUE,WACPG,IAAI,EAAG,oBACPD,SAAS,cAEdE,aAAclC,GAjBEyB,CAhCN,SAAAU,GAAA,IAAG/B,EAAH+B,EAAG/B,OAAQU,EAAXqB,EAAWrB,QAASsB,EAApBD,EAAoBC,aAApB,OACVlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACiB,EAAD,CACExB,WAAYT,EAAOW,KACnBD,QAASA,EAAQC,KACjBA,KAAK,OACLE,KAAK,OACLD,MAAM,cAERE,EAAAC,EAAAC,cAACiB,EAAD,CACExB,WAAYT,EAAOuB,MACnBb,QAASA,EAAQa,MACjBZ,KAAK,QACLE,KAAK,QACLD,MAAM,UAERE,EAAAC,EAAAC,cAACiB,EAAD,CACExB,WAAYT,EAAOwB,SACnBd,QAASA,EAAQc,SACjBb,KAAK,WACLE,KAAK,WACLD,MAAM,cAGVE,EAAAC,EAAAC,cAAA,UAAQH,KAAK,SAASqB,SAAUF,GAAhC,cClCcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAAeC,SAASC,eAAe,SD2HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aa594ebf.chunk.js","sourcesContent":["const HandleSubmit = (values, { resetForm }) => {\n  let errors = [\n    \"No such file or directory\",\n    \"Sorry, this username is taken\",\n    \"The server is not reachable\",\n    \"Site doesn't exist\"\n  ];\n  let error = errors[Math.floor(Math.random() * errors.length)];\n  setTimeout(() => {\n    alert(error);\n    resetForm();\n  }, 2000);\n};\nexport default HandleSubmit;\n","import React from \"react\";\nimport { withFormik, Form, Field } from \"formik\";\nimport \"./App.css\";\nimport * as Yup from \"yup\";\nimport HandleSubmit from \"./Helper\";\n\nconst InputLine = ({ errorsName, touched, name, title, type }) => (\n  <div className=\"container\">\n    <Field\n      className={`inputText${errorsName && touched ? \" errorInput\" : \"\"}`}\n      type={type}\n      name={name}\n    />\n    <span className=\"labelFloat\">\n      {title}\n      {errorsName && touched && <span className=\"error\">{errorsName}</span>}\n    </span>\n  </div>\n);\n\nconst App = ({ errors, touched, isSubmitting }) => (\n  <div className=\"form\">\n    <Form>\n      <div className=\"loginForm\">\n        <InputLine\n          errorsName={errors.name}\n          touched={touched.name}\n          name=\"name\"\n          type=\"text\"\n          title=\"Full Name\"\n        />\n        <InputLine\n          errorsName={errors.email}\n          touched={touched.email}\n          name=\"email\"\n          type=\"email\"\n          title=\"Email\"\n        />\n        <InputLine\n          errorsName={errors.password}\n          touched={touched.password}\n          name=\"password\"\n          type=\"password\"\n          title=\"Password\"\n        />\n      </div>\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  </div>\n);\nconst FormikApp = withFormik({\n  mapPropsToValues() {\n    return {\n      name: \"\",\n      email: \"\",\n      password: \"\"\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required(\"Required\"),\n    email: Yup.string()\n      .email(\"Invalid email address\")\n      .required(\"Required\"),\n    password: Yup.string()\n      .min(8, \"min 8 characters\")\n      .required(\"Required\")\n  }),\n  handleSubmit: HandleSubmit\n})(App);\n\nexport default FormikApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport FormikApp from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<FormikApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}